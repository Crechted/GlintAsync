#include "/Engine/Private/Common.ush"
#include "/Engine/Private/DeferredShadingCommon.ush"
#include "CustomFunction.ush"

SamplerState SceneColorSampler;

float2 TextureSize;

Texture2D<float4> NormalSourceTexture;

RWTexture2D<float4> OutputTexture;

[numthreads(THREADS_X, THREADS_Y, 1)]
void NormalACS(uint3 DispatchThreadID : SV_DispatchThreadID, uint3 GroupThreadID : SV_GroupThreadID)
{
    /*const float2 UV = DispatchThreadID.xy / TextureSize;
    const float4 SceneColour = NormalSourceTexture.SampleLevel(SceneColorSampler, UV, 0);
    OutputTexture[DispatchThreadID.xy] = saturate(SceneColour);*/

    const float2 UV = DispatchThreadID.xy / TextureSize;
    const float2 TexelSize = GetTexelSize(NormalSourceTexture);

    const float4 Normal = NormalSourceTexture.SampleLevel(SceneColorSampler, UV, 0);
    const float Amplification = 1.0f;
    const float3 Gray = float3(0.33000001, 0.33000001, 0.33000001);
    
    float Local4 = dot(Gray.rgb, Normal.rgb);
    float Local5 = (Local4 * Amplification);

    float2 UVAddX = UV + float2(TexelSize.x, 0);
    float4 Local8 = NormalSourceTexture.SampleLevel(SceneColorSampler, UVAddX, 0);
    float Local10 = dot(Gray.rgb, Local8.rgb);
    float Local11 = (Local10 * Amplification);

    float Local12 = (Local5 - Local11);

    float2 UVAddY = UV + float2(0, TexelSize.y);
    float4 Local15 = NormalSourceTexture.SampleLevel(SceneColorSampler, UVAddY, 0);
    float Local17 = dot(Gray.rgb, Local15.rgb);
    float Local18 = (Local17 * Amplification);
    float Local19 = (Local5 - Local18);

    float4 Emissive = float4(float2(Local12, Local19), 0.0f, 1.0f);
    //float3 Local20 = lerp(Emissive, Material.PreshaderBuffer[3].yzw, Material.PreshaderBuffer[3].x);
    //PixelMaterialInputs.EmissiveColor = Local20;
    OutputTexture[DispatchThreadID.xy] = saturate(Emissive);
}