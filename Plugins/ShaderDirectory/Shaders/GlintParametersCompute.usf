// Copyright Epic Games, Inc. All Rights Reserved.
#pragma once
#include "/Engine/Private/SceneTextureParameters.ush"

//=============================================================================
//======== Tangent space maths ================================================
//=============================================================================
float get_cos_theta(const float3 w) { return w.z; }
float get_cos_2_theta(const float3 w) { return w.z * w.z; }
float get_sin_2_theta(const float3 w) { return max(0.f, 1.f - get_cos_2_theta(w)); }
float get_sin_theta(const float3 w) { return sqrt(get_sin_2_theta(w)); }
float get_tan_theta(const float3 w) { return get_sin_theta(w) / get_cos_theta(w); }
float get_cos_phi(const float3 w) { return (get_sin_theta(w) == 0.f) ? 1.f : clamp(w.x / get_sin_theta(w), -1.f, 1.f); }
float get_sin_phi(const float3 w) { return (get_sin_theta(w) == 0.f) ? 0.f : clamp(w.y / get_sin_theta(w), -1.f, 1.f); }
float get_cos_2_phi(const float3 w) { return get_cos_phi(w) * get_cos_phi(w); }
float get_sin_2_phi(const float3 w) { return get_sin_phi(w) * get_sin_phi(w); }

//=============================================================================
//======== Shifting view/incident direction for off-center V-cavity ===========
//=============================================================================
float3 shift_W(float3 w, // vector to be transformed
    float x0, float y0 // average slope
    )
{
    float3 shifted_w = float3(0., 0., 0.);

    float cos_phi = get_cos_phi(w);
    float sin_phi = get_sin_phi(w);
    float tan_theta = get_tan_theta(w);

    float2 w_xy = normalize(float2(cos_phi, sin_phi)); // vector projected in tangent space XY
    float mu_phi = w_xy.x * x0 + w_xy.y * y0;

    float cos_mu_phi = cos(mu_phi);
    float sin_mu_phi = sin(mu_phi);

    float w_z = 1. / tan_theta;

    shifted_w.xy = w_xy;

    float w_xy_length = length(w_xy);

    float shifted_w_z;
    if (cos_mu_phi < 0.)
    {
        shifted_w_z = w_xy_length * (w_xy_length * cos_mu_phi - w_z * sin_mu_phi) / (w_z * cos_mu_phi + w_xy_length * sin_mu_phi);
    }
    else
    {
        shifted_w_z = w_xy_length * (w_z * cos_mu_phi + w_xy_length * sin_mu_phi) / (w_xy_length * cos_mu_phi - w_z * sin_mu_phi);
    }

    return normalize(float3(w_xy, shifted_w_z));
}

float3x3 make_tbn(float3 n)
{
    float a0 = 1.0f / (1.0f + n.z);
    float b0 = -n.x * n.y * a0;
    float3 t = normalize(float3(1.0f - n.x * n.x * a0, b0, -n.x));
    float3 b = normalize(float3(b0, 1.0f - n.y * n.y * a0, -n.y));
    return float3x3(t, b, n);
}

SamplerState SceneColorSampler;

Texture2D NormalTexture1;
Texture2D NormalTexture2;
float2 TextureSize;
float3 SigmasRho;

RWTexture2D<float4> GlintParametersTexture;

[numthreads(THREADS_X, THREADS_Y, 1)]
void GlintParametersCompute(uint3 DispatchThreadID : SV_DispatchThreadID, uint3 GroupThreadID : SV_GroupThreadID)
{
    float2 GlintUV = DispatchThreadID.xy / TextureSize;

    float2 Normals1 = NormalTexture1.SampleLevel(SceneColorSampler, GlintUV, 0).xy;
    float3 Normals2 = NormalTexture2.SampleLevel(SceneColorSampler, GlintUV, 0).xyz;

    float sigma_x_mat = SigmasRho.x;
    float sigma_y_mat = SigmasRho.y;
    float rho_mat = SigmasRho.z;

    float normal_map_std_slope_x_sqr = Normals2.x - Normals1.x * Normals1.x;
    float normal_map_std_slope_y_sqr = Normals2.y - Normals1.y * Normals1.y;

    normal_map_std_slope_x_sqr = clamp(normal_map_std_slope_x_sqr, 0.0001, 1.);
    normal_map_std_slope_y_sqr = clamp(normal_map_std_slope_y_sqr, 0.0001, 1.);

    float sigma_x_normals = sqrt(normal_map_std_slope_x_sqr);
    float sigma_y_normals = sqrt(normal_map_std_slope_y_sqr);

    float rho_normals = Normals2.z - Normals1.x * Normals1.y;
    if (normal_map_std_slope_x_sqr == 0.0001 || normal_map_std_slope_y_sqr == 0.0001)
    {
        sigma_x_normals = 0.;
        sigma_y_normals = 0.;
        rho_normals = 0.;
    }
    else
    {
        rho_normals /= sigma_x_normals * sigma_y_normals;
        rho_normals = clamp(rho_normals, -0.99, 0.99);
    }

    float sigma_x = sqrt(sigma_x_mat * sigma_x_mat + sigma_x_normals * sigma_x_normals);
    float sigma_y = sqrt(sigma_y_mat * sigma_y_mat + sigma_y_normals * sigma_y_normals);
    float rho = (rho_mat * sigma_x_mat * sigma_y_mat + rho_normals * sigma_x_normals * sigma_y_normals) / (sigma_x * sigma_y);

    sigma_x = clamp(sigma_x, 0.01f, 1.f);
    sigma_y = clamp(sigma_y, 0.01f, 1.f);
    rho = clamp(rho, -0.99f, 0.99f);
    //float3 wn = float3(-Normals1.x, -Normals1.y, 1.) / sqrt(1 + Normals1.x * Normals1.x + Normals1.y * Normals1.y);

    GlintParametersTexture[DispatchThreadID.xy] = float4(sigma_x, sigma_y, rho, 0.0f);
}