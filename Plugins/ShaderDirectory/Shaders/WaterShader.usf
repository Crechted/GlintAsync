//#define NUM_TEX_COORD_INTERPOLATORS 1
//#define NUM_MATERIAL_TEXCOORDS_VERTEX 1
#include "/Engine/Private/Common.ush"
#include "/Engine/Generated/Material.ush"
#include "/Engine/Generated/VertexFactory.ush"
#include "/Engine/Private/DeferredShadingCommon.ush"

struct FWaterMeshPassVSToPS
{
    FVertexFactoryInterpolantsVSToPS FactoryInterpolants;
    float4 Position : SV_POSITION;
    float4 SavedWorldPosition : POSITION1;
    float4 SavedCameraVector : POSITION2;
};

void MainVS(FVertexFactoryInput Input, out FWaterMeshPassVSToPS Output)
{
    ResolvedView = ResolveViewFromVF(Input);
    // get world position
    const FVertexFactoryIntermediates VFIntermediates = GetVertexFactoryIntermediates(Input);
    Output.SavedWorldPosition = VertexFactoryGetWorldPosition(Input, VFIntermediates);
    float3x3 TangentToLocal = VertexFactoryGetTangentToLocal(Input, VFIntermediates);

    FMaterialVertexParameters VertexParameters = GetMaterialVertexParameters(Input, VFIntermediates, Output.SavedWorldPosition.xyz,
        TangentToLocal);
    {
        Output.SavedWorldPosition.xyz += GetMaterialWorldPositionOffset(VertexParameters);
    }
    Output.FactoryInterpolants = VertexFactoryGetInterpolantsVSToPS(Input, VFIntermediates, VertexParameters);
    //Output.SavedTexCoords = float(); // Или другой канал
    //Output.FactoryInterpolants.TexCoords[0] = Input.TexCoords0;

    Output.Position = mul(Output.SavedWorldPosition, ResolvedView.TranslatedWorldToClip);
    Output.SavedCameraVector.xyz = normalize(LWCToFloat(ResolvedView.WorldCameraOrigin).xyz - Output.SavedWorldPosition.xyz);
}

// need to be deferred output
void MainPS(FWaterMeshPassVSToPS Input
    , out float4 OutTarget0 : SV_Target0
    , out float4 OutTarget1 : SV_Target1
    , out float4 OutTarget2 : SV_Target2
    , out float4 OutTarget3 : SV_Target3)
{
    FMaterialPixelParameters MaterialParameters = GetMaterialPixelParameters(Input.FactoryInterpolants, Input.Position);

    FPixelMaterialInputs MaterialInputs;
    CalcMaterialParametersPost(MaterialParameters, MaterialInputs, Input.Position, true);

    float3 CameraVector = Input.SavedCameraVector.xyz;
    float3 WorldNormal = normalize(MaterialInputs.Normal);

    float3 DiffuseColor = MaterialInputs.BaseColor.rgb;
    float3 EmissiveColor = MaterialInputs.EmissiveColor.rgb;
    float2 TexCoord = 0;
#if NUM_TEX_COORD_INTERPOLATORS
    TexCoord = MaterialParameters.TexCoords[0].xy * (float2)1000.00000000;
    CameraVector = MaterialParameters.CameraVector;
#endif

    OutTarget0 = float4(CameraVector, TexCoord.x);
    OutTarget1 = float4(WorldNormal, TexCoord.y);
    OutTarget2 = float4(ddx(TexCoord), ddy(TexCoord));
    OutTarget3 = float4(DiffuseColor + EmissiveColor, 1.0f);
}