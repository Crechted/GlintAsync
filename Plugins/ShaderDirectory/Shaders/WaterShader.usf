//#define NUM_TEX_COORD_INTERPOLATORS 1
//#define NUM_MATERIAL_TEXCOORDS_VERTEX 1
#include "/Engine/Private/Common.ush"
#include "/Engine/Generated/Material.ush"
#include "/Engine/Generated/VertexFactory.ush"
#include "/Engine/Private/DeferredShadingCommon.ush"
#include "/Engine/Private/Strata/Glint/GlintThirdParty.ush"

float3x3 make_tbn(float3 n)
{
    float a0 = 1.0f / (1.0f + n.z);
    float b0 = -n.x * n.y * a0;
    float3 t = normalize(float3(1.0f - n.x * n.x * a0, b0, -n.x));
    float3 b = normalize(float3(b0, 1.0f - n.y * n.y * a0, -n.y));
    return float3x3(t, b, n);
}


struct FWaterMeshPassVSToPS
{
    FVertexFactoryInterpolantsVSToPS FactoryInterpolants;
    float4 Position : SV_POSITION;
    float4 SavedWorldPosition : POSITION1;
    float4 SavedCameraVector : POSITION2;
};

void MainVS(FVertexFactoryInput Input, out FWaterMeshPassVSToPS Output)
{
    ResolvedView = ResolveViewFromVF(Input);
    // get world position
    const FVertexFactoryIntermediates VFIntermediates = GetVertexFactoryIntermediates(Input);
    Output.SavedWorldPosition = VertexFactoryGetWorldPosition(Input, VFIntermediates);
    float3x3 TangentToLocal = VertexFactoryGetTangentToLocal(Input, VFIntermediates);

    FMaterialVertexParameters VertexParameters = GetMaterialVertexParameters(Input, VFIntermediates, Output.SavedWorldPosition.xyz,
        TangentToLocal);
    {
        Output.SavedWorldPosition.xyz += GetMaterialWorldPositionOffset(VertexParameters);
    }
    Output.FactoryInterpolants = VertexFactoryGetInterpolantsVSToPS(Input, VFIntermediates, VertexParameters);
    //Output.SavedTexCoords = float(); // Или другой канал
    //Output.FactoryInterpolants.TexCoords[0] = Input.TexCoords0;

    Output.Position = mul(Output.SavedWorldPosition, ResolvedView.TranslatedWorldToClip);
    Output.SavedCameraVector.xyz = normalize(LWCToFloat(ResolvedView.WorldCameraOrigin).xyz - Output.SavedWorldPosition.xyz);
}

// need to be deferred output
void MainPS(FWaterMeshPassVSToPS Input
    , out float4 OutTarget0 : SV_Target0
    , out float4 OutTarget1 : SV_Target1
    , out float4 OutTarget2 : SV_Target2
    , out float4 OutTarget3 : SV_Target3)
{
    FMaterialPixelParameters MaterialParameters = GetMaterialPixelParameters(Input.FactoryInterpolants, Input.Position);

    FPixelMaterialInputs MaterialInputs;
    CalcMaterialParametersPost(MaterialParameters, MaterialInputs, Input.Position, true);

    float3 CameraVector = Input.SavedCameraVector.xyz;
    float3 WorldNormal = normalize(MaterialInputs.Normal);

    float3 DiffuseColor = MaterialInputs.BaseColor.rgb;
    float3 EmissiveColor = MaterialInputs.EmissiveColor.rgb;
    float2 TexCoord = 0;
#if NUM_TEX_COORD_INTERPOLATORS
    TexCoord = MaterialParameters.TexCoords[0].xy * (float2)1000.00000000;
    CameraVector = MaterialParameters.CameraVector;
#endif

    const float3 N = WorldNormal.xyz;
    const float3 V = CameraVector.xyz;
    const float3 L = normalize(float3(0., 1., 0.1)).xyz;
    const float3x3 WorldToTangent = make_tbn(N);
    const float3 wo = normalize(mul(V, WorldToTangent));
    const float3 wi = normalize(mul(L, WorldToTangent));
    float D = f_P(wo, wi, float3(0.6, 0.15, 0), 0, TexCoord, ddx(TexCoord), ddy(TexCoord), false);
    OutTarget0 = float4(CameraVector, TexCoord.x);
    OutTarget1 = float4(WorldNormal, TexCoord.y);
    OutTarget2 = float4(ddx(TexCoord), ddy(TexCoord));
    OutTarget3 = float4(D, DiffuseColor + EmissiveColor);
}