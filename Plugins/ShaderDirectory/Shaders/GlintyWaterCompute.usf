// Copyright Epic Games, Inc. All Rights Reserved.
#pragma once
#include "/Engine/Private/Strata/Glint/GlintThirdParty.ush"
#include "/Engine/Private/BRDF.ush"

//=============================================================================
//======== Tangent space maths ================================================
//=============================================================================
float get_cos_theta(const float3 w)       {return w.z;}
float get_cos_2_theta(const float3 w)     {return w.z*w.z;}
float get_sin_2_theta(const float3 w)     {return max(0.f, 1.f - get_cos_2_theta(w));}
float get_sin_theta(const float3 w)       {return sqrt(get_sin_2_theta(w));}
float get_tan_theta(const float3 w)       {return get_sin_theta(w) / get_cos_theta(w);}
float get_cos_phi(const float3 w)         {return (get_sin_theta(w) == 0.f) ? 1.f : clamp(w.x / get_sin_theta(w), -1.f, 1.f);}
float get_sin_phi(const float3 w)         {return (get_sin_theta(w) == 0.f) ? 0.f : clamp(w.y / get_sin_theta(w), -1.f, 1.f);}
float get_cos_2_phi(const float3 w)       {return get_cos_phi(w) * get_cos_phi(w);}
float get_sin_2_phi(const float3 w)       {return get_sin_phi(w) * get_sin_phi(w);} 

//=============================================================================
//======== Shifting view/incident direction for off-center V-cavity ===========
//=============================================================================
float3 shift_W(float3 w, // vector to be transformed
             float x0, float y0 // average slope
             )
{
    float3 shifted_w = float3(0., 0., 0.);

    float cos_phi = get_cos_phi(w);
    float sin_phi = get_sin_phi(w);
    float tan_theta = get_tan_theta(w);

    float2 w_xy = normalize(float2(cos_phi, sin_phi)); // vector projected in tangent space XY
    float mu_phi = w_xy.x * x0 + w_xy.y * y0;

    float cos_mu_phi = cos(mu_phi);
    float sin_mu_phi = sin(mu_phi);

    float w_z = 1. / tan_theta;

    shifted_w.xy = w_xy;

    float w_xy_length = length(w_xy);

    float shifted_w_z;
    if (cos_mu_phi < 0.) {
        shifted_w_z = w_xy_length * (w_xy_length * cos_mu_phi - w_z * sin_mu_phi) / (w_z * cos_mu_phi + w_xy_length * sin_mu_phi);
    }
    else
    {
        shifted_w_z = w_xy_length * (w_z * cos_mu_phi + w_xy_length * sin_mu_phi) / (w_xy_length * cos_mu_phi - w_z * sin_mu_phi);
    }

    return normalize(float3(w_xy, shifted_w_z));
}

float3x3 make_tbn(float3 n)
{
    float a0 = 1.0f / (1.0f + n.z);
    float b0 = -n.x * n.y * a0;
    float3 t = normalize(float3(1.0f -n.x * n.x * a0, b0, -n.x));
    float3 b = normalize(float3(b0, 1.0f -n.y * n.y * a0, -n.y));
    return float3x3(t,b,n);
}

SamplerState SceneColorSampler;

Texture2D NormalTexture1;
Texture2D NormalTexture2;
Texture2D GlintParamsTexture;
float3 LightVector;
float2 TextureSize;
float3 SigmasRho;
float density;

float3 WorldNormal;
float3 CameraVector;

RWTexture2D<float3> GlintsResultTexture;

[numthreads(THREADS_X, THREADS_Y, 1)]
void AccumulateGlintWaterModelCompute(uint3 DispatchThreadID : SV_DispatchThreadID, uint3 GroupThreadID : SV_GroupThreadID)
{
    const float3x3 WorldToTangent = make_tbn(WorldNormal);
    
	//const float3 N = WorldNormal;
	const float3 V = CameraVector;
    const float3 L = LightVector.xyz;

    //const float3 wg = float3(0.0f, 0.0f, 1.0f); //normalize(mul(N, WorldToTangent));
    const float3 wo = normalize(mul(V, WorldToTangent));
    const float3 wi = normalize(mul(L, WorldToTangent));

	const float NoV = saturate( abs( dot(N, V) ) + 1e-5 );

	float2 GlintUV = DispatchThreadID.xy / TextureSize;

    float2 Normals1 = NormalTexture1.SampleLevel(SceneColorSampler, GlintUV, 0).xy;
    float3 GlintParams = GlintParamsTexture.SampleLevel(SceneColorSampler, GlintUV, 0).xyz;
    
    SurfaceColor = DiffuseColor + EmissiveColor;
	
    float density = GetGlintyWaterParams5(MaterialParams);

    float sigma_x = GlintParams.x;
    float sigma_y = GlintParams.y;
    float rho = GlintParams.z;
    float3 wn = float3(-Normals1.x, -Normals1.y, 1.) / sqrt(1 + Normals1.x * Normals1.x + Normals1.y * Normals1.y);
    
    float D = f_P(wo, wi, float3(sigma_x, sigma_y, rho), density, GlintUV, ddx(GlintUV), ddy(GlintUV), false);

    float3 wh = normalize(wo + wi);

    float projected_area = clamp(dot(wn, wo) / dot(wn, wg), 1., 1000000000.);

    float3 slope_projected_area = float3(Normals1, projected_area);

    float h_dot_v = clamp(dot(wo, wh), 0., 1.);
    float n_dot_l = dot(N, L);

    float3 wh_shifted = shift_W(wh, slope_projected_area.x, slope_projected_area.y);

    // V-cavity masking shadowing
    float G1wowh = min(1., 2. * wh_shifted.z * wo.z / dot(wo, wh_shifted));
    float G1wiwh = n_dot_l > 0. ? min(1., 2. * wh_shifted.z * wi.z / dot(wi, wh_shifted)) : 0.;
    float G = clamp(G1wowh * G1wiwh, 0., 1.);

    // Fresnel
    float3 F = F_Schlick(float3(1,1,1), NoV);

    float3 GlintRes = slope_projected_area.z * (F * G * D) / 4.;
    GlintsResultTexture[DispatchThreadID.xy] = GlintRes;
}


